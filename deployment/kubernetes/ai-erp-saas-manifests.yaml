# AI ERP SaaS Platform - Kubernetes Manifests
# World-class cloud-native deployment configuration

apiVersion: v1
kind: Namespace
metadata:
  name: ai-erp-saas
  labels:
    name: ai-erp-saas
    environment: production

---
# PostgreSQL Database
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: ai-erp-saas
data:
  POSTGRES_DB: ai_erp_saas
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "secure_password_here"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ai-erp-saas
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: ai-erp-saas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: ai-erp-saas
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ai-erp-saas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: ai-erp-saas
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Backend API Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: ai-erp-saas
data:
  DATABASE_URL: "postgresql://postgres:secure_password_here@postgres:5432/ai_erp_saas"
  REDIS_URL: "redis://redis:6379"
  ENVIRONMENT: "production"
  JWT_SECRET: "your-jwt-secret-change-in-production"
  SECRET_KEY: "your-secret-key-change-in-production"
  AZURE_FORM_RECOGNIZER_ENDPOINT: "https://your-cognitive-services.cognitiveservices.azure.com/"
  AZURE_FORM_RECOGNIZER_KEY: "your-azure-key-here"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: ai-erp-saas
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: ai-erp-saas/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: REDIS_URL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: ENVIRONMENT
        - name: JWT_SECRET
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: JWT_SECRET
        - name: SECRET_KEY
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: SECRET_KEY
        - name: AZURE_FORM_RECOGNIZER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: AZURE_FORM_RECOGNIZER_ENDPOINT
        - name: AZURE_FORM_RECOGNIZER_KEY
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: AZURE_FORM_RECOGNIZER_KEY
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true

---
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  namespace: ai-erp-saas
spec:
  selector:
    app: backend-api
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# Background Workers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-workers
  namespace: ai-erp-saas
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-workers
  template:
    metadata:
      labels:
        app: backend-workers
    spec:
      containers:
      - name: backend-workers
        image: ai-erp-saas/backend:latest
        command: ["python", "-m", "celery", "worker", "-A", "src.worker", "--loglevel=info"]
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: REDIS_URL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: ENVIRONMENT
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true

---
# Frontend Web Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-web
  namespace: ai-erp-saas
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-web
  template:
    metadata:
      labels:
        app: frontend-web
    spec:
      containers:
      - name: frontend-web
        image: ai-erp-saas/web:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.ai-erp-saas.com"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-web
  namespace: ai-erp-saas
spec:
  selector:
    app: frontend-web
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Mobile App (if needed as web service)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mobile-app
  namespace: ai-erp-saas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mobile-app
  template:
    metadata:
      labels:
        app: mobile-app
    spec:
      containers:
      - name: mobile-app
        image: ai-erp-saas/mobile:latest
        ports:
        - containerPort: 19000
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: mobile-app
  namespace: ai-erp-saas
spec:
  selector:
    app: mobile-app
  ports:
  - port: 19000
    targetPort: 19000
  type: ClusterIP

---
# Horizontal Pod Autoscaler for Backend API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-api-hpa
  namespace: ai-erp-saas
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-web-hpa
  namespace: ai-erp-saas
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend-web
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ai-erp-saas-ingress
  namespace: ai-erp-saas
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - ai-erp-saas.com
    - api.ai-erp-saas.com
    secretName: ai-erp-saas-tls
  rules:
  - host: ai-erp-saas.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-web
            port:
              number: 3000
  - host: api.ai-erp-saas.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-api
            port:
              number: 8000

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-erp-saas-network-policy
  namespace: ai-erp-saas
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ai-erp-saas
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: ai-erp-saas
  - to: []  # Allow external access for Azure services, etc.
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-api-pdb
  namespace: ai-erp-saas
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: backend-api

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-web-pdb
  namespace: ai-erp-saas
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: frontend-web

---
# Monitoring and Observability
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: ai-erp-saas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: ai-erp-saas
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ai-erp-saas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: ai-erp-saas
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Backup and Disaster Recovery
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: ai-erp-saas
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: postgres:15-alpine
            command:
            - /bin/bash
            - -c
            - |
              pg_dump -h postgres -U postgres ai_erp_saas > /backup/backup-$(date +%Y%m%d).sql
              gzip /backup/backup-$(date +%Y%m%d).sql
            env:
            - name: PGPASSWORD
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_PASSWORD
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-pvc
          restartPolicy: OnFailure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: ai-erp-saas
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
