version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-erp-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_erp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-erp-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # OCR Microservice
  ocr-service:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    container_name: ai-erp-ocr-prod
    environment:
      - OCR_PROVIDER=${OCR_PROVIDER:-azure}
      - AZURE_FORM_RECOGNIZER_ENDPOINT=${AZURE_FORM_RECOGNIZER_ENDPOINT}
      - AZURE_FORM_RECOGNIZER_KEY=${AZURE_FORM_RECOGNIZER_KEY}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.8}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS:-pdf,jpg,jpeg,png,tiff}
    volumes:
      - ocr_uploads:/app/uploads
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    depends_on:
      postgres:
        condition: service_healthy

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: ai-erp-backend-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ai_erp}
      - REDIS_URL=redis://redis:6379
      - OCR_SERVICE_URL=http://ocr-service:8001
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ocr-service:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-erp-frontend-prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    depends_on:
      backend:
        condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-erp-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:
  ocr_uploads:
  backend_uploads:
  nginx_logs:

networks:
  ai-erp-network:
    driver: bridge









