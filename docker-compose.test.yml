version: '3.8'

services:
  # Test Database
  postgres-test:
    image: postgres:15
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Redis
  redis-test:
    image: redis:7
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test OCR Service
  ocr-service-test:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    environment:
      - OCR_PROVIDER=mock
      - CONFIDENCE_THRESHOLD=0.8
    ports:
      - "8002:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Tests
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/test_db
      - REDIS_URL=redis://redis-test:6379
      - OCR_SERVICE_URL=http://ocr-service-test:8001
      - SECRET_KEY=test_secret_key
      - ENVIRONMENT=testing
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      ocr-service-test:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
    command: >
      sh -c "
        alembic upgrade head &&
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      "
    ports:
      - "8001:8000"

  # Frontend Tests
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://backend-test:8000/api/v1
      - NODE_ENV=test
    command: >
      sh -c "
        npm ci &&
        npm run lint &&
        npm run type-check &&
        npm run build &&
        npm test -- --coverage --watchAll=false
      "
    depends_on:
      - backend-test
    ports:
      - "3001:3000"









