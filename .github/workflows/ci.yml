name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: 'test_password'
  POSTGRES_DB: 'test_db'
  POSTGRES_USER: 'test_user'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      working-directory: ./backend
      run: |
        export DATABASE_URL="postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}"
        export REDIS_URL="redis://localhost:6379"
        export SECRET_KEY="test_secret_key"
        export ENVIRONMENT="testing"
        export OCR_SERVICE_URL="http://localhost:8001"

    - name: Run database migrations
      working-directory: ./backend
      run: |
        export DATABASE_URL="postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}"
        alembic upgrade head

    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src tests
        isort --check-only src tests

    - name: Run type checking
      working-directory: ./backend
      run: |
        mypy src --ignore-missing-imports

    - name: Run unit tests
      working-directory: ./backend
      run: |
        export DATABASE_URL="postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}"
        export REDIS_URL="redis://localhost:6379"
        export SECRET_KEY="test_secret_key"
        export ENVIRONMENT="testing"
        export OCR_SERVICE_URL="http://localhost:8001"
        pytest tests/ -m "unit" --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml

    - name: Run integration tests
      working-directory: ./backend
      run: |
        export DATABASE_URL="postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}"
        export REDIS_URL="redis://localhost:6379"
        export SECRET_KEY="test_secret_key"
        export ENVIRONMENT="testing"
        export OCR_SERVICE_URL="http://localhost:8001"
        pytest tests/ -m "integration" --cov=src --cov-report=xml --cov-report=html --junitxml=integration-results.xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/test-results.xml
          backend/integration-results.xml
          backend/htmlcov/

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

  # OCR Service Tests
  ocr-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./ocr-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run OCR service tests
      working-directory: ./ocr-service
      run: |
        export OCR_PROVIDER="mock"
        export CONFIDENCE_THRESHOLD="0.8"
        python -m pytest tests/ -v --cov=src --cov-report=xml

  # Docker Build and Test
  docker-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ocr-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: ai-erp-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: ai-erp-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build OCR service image
      uses: docker/build-push-action@v5
      with:
        context: ./ocr-service
        push: false
        tags: ai-erp-ocr:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        # Test that all services can start together
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.prod.yml config

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json

    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level moderate

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ocr-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        npm install -g artillery

    - name: Start services
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to be ready

    - name: Run performance tests
      run: |
        # Run the performance test script
        node test-performance.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          performance-report-*.json
          *.png

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ocr-tests, docker-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ocr-tests, docker-tests, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example: kubectl apply -f k8s/production/

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ocr-tests, docker-tests]
    if: failure()

    steps:
    - name: Notify on failure
      run: |
        echo "One or more tests failed. Please check the logs."
        # Add notification logic here (Slack, email, etc.)