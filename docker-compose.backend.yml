version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai-erp-backend-dev
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_erp_saas
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - WORKERS=2
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    depends_on:
      - postgres
      - redis
    networks:
      - ai-erp-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      uvicorn src.main:app
      --host 0.0.0.0
      --port 8000
      --reload
      --workers 2

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-erp-postgres-dev
    environment:
      POSTGRES_DB: ai_erp_saas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_erp_saas"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-erp-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data_dev:
  redis_data_dev:

networks:
  ai-erp-network:
    external: true
