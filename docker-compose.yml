version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-erp-postgres
    environment:
      POSTGRES_DB: ai_erp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-erp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # OCR Microservice
  ocr-service:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    container_name: ai-erp-ocr
    environment:
      - OCR_PROVIDER=mock
      - CONFIDENCE_THRESHOLD=0.8
      - MAX_FILE_SIZE=10485760
      - ALLOWED_EXTENSIONS=pdf,jpg,jpeg,png,tiff
    ports:
      - "8001:8001"
    volumes:
      - ocr_uploads:/app/uploads
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-erp-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_erp
      - REDIS_URL=redis://redis:6379
      - OCR_SERVICE_URL=http://ocr-service:8001
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=your-secret-key-change-in-production
    ports:
      - "8000:8000"
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ocr-service:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-erp-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - ai-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  ocr_uploads:
  backend_uploads:

networks:
  ai-erp-network:
    driver: bridge